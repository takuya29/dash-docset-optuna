
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "reference/visualization/matplotlib/generated/optuna.visualization.matplotlib.edf.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_reference_visualization_matplotlib_generated_optuna.visualization.matplotlib.edf.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_reference_visualization_matplotlib_generated_optuna.visualization.matplotlib.edf.py:


plot_edf
========

.. autofunction:: optuna.visualization.matplotlib.plot_edf

The following code snippet shows how to plot EDF.

.. GENERATED FROM PYTHON SOURCE LINES 11-44



.. image-sg:: /reference/visualization/matplotlib/generated/images/sphx_glr_optuna.visualization.matplotlib.edf_001.png
   :alt: Empirical Distribution Function Plot
   :srcset: /reference/visualization/matplotlib/generated/images/sphx_glr_optuna.visualization.matplotlib.edf_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/dash-docset-optuna/dash-docset-optuna/optuna/docs/visualization_matplotlib_examples/optuna.visualization.matplotlib.edf.py:43: ExperimentalWarning:

    plot_edf is experimental (supported from v2.2.0). The interface can change in the future.


    <Axes: title={'center': 'Empirical Distribution Function Plot'}, xlabel='Objective Value', ylabel='Cumulative Probability'>





|

.. code-block:: Python


    import math

    import optuna


    def ackley(x, y):
        a = 20 * math.exp(-0.2 * math.sqrt(0.5 * (x**2 + y**2)))
        b = math.exp(0.5 * (math.cos(2 * math.pi * x) + math.cos(2 * math.pi * y)))
        return -a - b + math.e + 20


    def objective(trial, low, high):
        x = trial.suggest_float("x", low, high)
        y = trial.suggest_float("y", low, high)
        return ackley(x, y)


    sampler = optuna.samplers.RandomSampler(seed=10)

    # Widest search space.
    study0 = optuna.create_study(study_name="x=[0,5), y=[0,5)", sampler=sampler)
    study0.optimize(lambda t: objective(t, 0, 5), n_trials=500)

    # Narrower search space.
    study1 = optuna.create_study(study_name="x=[0,4), y=[0,4)", sampler=sampler)
    study1.optimize(lambda t: objective(t, 0, 4), n_trials=500)

    # Narrowest search space but it doesn't include the global optimum point.
    study2 = optuna.create_study(study_name="x=[1,3), y=[1,3)", sampler=sampler)
    study2.optimize(lambda t: objective(t, 1, 3), n_trials=500)

    optuna.visualization.matplotlib.plot_edf([study0, study1, study2])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.306 seconds)


.. _sphx_glr_download_reference_visualization_matplotlib_generated_optuna.visualization.matplotlib.edf.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: optuna.visualization.matplotlib.edf.ipynb <optuna.visualization.matplotlib.edf.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: optuna.visualization.matplotlib.edf.py <optuna.visualization.matplotlib.edf.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: optuna.visualization.matplotlib.edf.zip <optuna.visualization.matplotlib.edf.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
