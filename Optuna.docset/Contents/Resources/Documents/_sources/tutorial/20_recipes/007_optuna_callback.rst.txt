
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/20_recipes/007_optuna_callback.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_20_recipes_007_optuna_callback.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_20_recipes_007_optuna_callback.py:


.. _optuna_callback:

Callback for Study.optimize
===========================

This tutorial showcases how to use & implement Optuna ``Callback`` for :func:`~optuna.study.Study.optimize`.

``Callback`` is called after every evaluation of ``objective``, and
it takes :class:`~optuna.study.Study` and :class:`~optuna.trial.FrozenTrial` as arguments, and does some work.

:class:`~optuna.integration.MLflowCallback` is a great example.

.. GENERATED FROM PYTHON SOURCE LINES 17-23

Stop optimization after some trials are pruned in a row
-------------------------------------------------------

This example implements a stateful callback which stops the optimization
if a certain number of trials are pruned in a row.
The number of trials pruned in a row is specified by ``threshold``.

.. GENERATED FROM PYTHON SOURCE LINES 23-43

.. code-block:: default



    import optuna


    class StopWhenTrialKeepBeingPrunedCallback:
        def __init__(self, threshold: int):
            self.threshold = threshold
            self._consequtive_pruned_count = 0

        def __call__(self, study: optuna.study.Study, trial: optuna.trial.FrozenTrial) -> None:
            if trial.state == optuna.trial.TrialState.PRUNED:
                self._consequtive_pruned_count += 1
            else:
                self._consequtive_pruned_count = 0

            if self._consequtive_pruned_count >= self.threshold:
                study.stop()









.. GENERATED FROM PYTHON SOURCE LINES 44-45

This objective prunes all the trials except for the first 5 trials (``trial.number`` starts with 0).

.. GENERATED FROM PYTHON SOURCE LINES 45-52

.. code-block:: default

    def objective(trial):
        if trial.number > 4:
            raise optuna.TrialPruned

        return trial.suggest_float("x", 0, 1)









.. GENERATED FROM PYTHON SOURCE LINES 53-55

Here, we set the threshold to ``2``: optimization finishes once two trials are pruned in a row.
So, we expect this study to stop after 7 trials.

.. GENERATED FROM PYTHON SOURCE LINES 55-66

.. code-block:: default

    import logging
    import sys

    # Add stream handler of stdout to show the messages
    optuna.logging.get_logger("optuna").addHandler(logging.StreamHandler(sys.stdout))

    study_stop_cb = StopWhenTrialKeepBeingPrunedCallback(2)
    study = optuna.create_study()
    study.optimize(objective, n_trials=10, callbacks=[study_stop_cb])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A new study created in memory with name: no-name-acaf5230-d860-459b-b4dc-b6fbb8abc671
    Trial 0 finished with value: 0.8579602025301214 and parameters: {'x': 0.8579602025301214}. Best is trial 0 with value: 0.8579602025301214.
    Trial 1 finished with value: 0.8087828394244585 and parameters: {'x': 0.8087828394244585}. Best is trial 1 with value: 0.8087828394244585.
    Trial 2 finished with value: 0.42084223111515584 and parameters: {'x': 0.42084223111515584}. Best is trial 2 with value: 0.42084223111515584.
    Trial 3 finished with value: 0.19637828490502718 and parameters: {'x': 0.19637828490502718}. Best is trial 3 with value: 0.19637828490502718.
    Trial 4 finished with value: 0.17763542649239317 and parameters: {'x': 0.17763542649239317}. Best is trial 4 with value: 0.17763542649239317.
    Trial 5 pruned. 
    Trial 6 pruned. 




.. GENERATED FROM PYTHON SOURCE LINES 67-68

As you can see in the log above, the study stopped after 7 trials as expected.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.007 seconds)


.. _sphx_glr_download_tutorial_20_recipes_007_optuna_callback.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 007_optuna_callback.py <007_optuna_callback.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 007_optuna_callback.ipynb <007_optuna_callback.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
