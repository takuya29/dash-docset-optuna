
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/20_recipes/001_rdb.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorial_20_recipes_001_rdb.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_20_recipes_001_rdb.py:


.. _rdb:

Saving/Resuming Study with RDB Backend
==========================================

An RDB backend enables persistent experiments (i.e., to save and resume a study) as well as access to history of studies.
In addition, we can run multi-node optimization tasks with this feature, which is described in :ref:`distributed`.

In this section, let's try simple examples running on a local environment with SQLite DB.

.. note::
    You can also utilize other RDB backends, e.g., PostgreSQL or MySQL, by setting the storage argument to the DB's URL.
    Please refer to `SQLAlchemy's document <https://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls>`_ for how to set up the URL.


New Study
---------

We can create a persistent study by calling :func:`~optuna.study.create_study` function as follows.
An SQLite file ``example.db`` is automatically initialized with a new study record.

.. GENERATED FROM PYTHON SOURCE LINES 23-35

.. code-block:: default


    import logging
    import sys

    import optuna

    # Add stream handler of stdout to show the messages
    optuna.logging.get_logger("optuna").addHandler(logging.StreamHandler(sys.stdout))
    study_name = "example-study"  # Unique identifier of the study.
    storage_name = "sqlite:///{}.db".format(study_name)
    study = optuna.create_study(study_name=study_name, storage=storage_name)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A new study created in RDB with name: example-study




.. GENERATED FROM PYTHON SOURCE LINES 36-37

To run a study, call :func:`~optuna.study.Study.optimize` method passing an objective function.

.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: default



    def objective(trial):
        x = trial.suggest_float("x", -10, 10)
        return (x - 2) ** 2


    study.optimize(objective, n_trials=3)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Trial 0 finished with value: 27.71619186727524 and parameters: {'x': 7.264616972513313}. Best is trial 0 with value: 27.71619186727524.
    Trial 1 finished with value: 38.84973004921458 and parameters: {'x': -4.23295516181647}. Best is trial 0 with value: 27.71619186727524.
    Trial 2 finished with value: 1.0394219248836642 and parameters: {'x': 0.9804795613212729}. Best is trial 2 with value: 1.0394219248836642.




.. GENERATED FROM PYTHON SOURCE LINES 47-52

Resume Study
------------

To resume a study, instantiate a :class:`~optuna.study.Study` object
passing the study name ``example-study`` and the DB URL ``sqlite:///example-study.db``.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: default



    study = optuna.create_study(study_name=study_name, storage=storage_name, load_if_exists=True)
    study.optimize(objective, n_trials=3)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using an existing study with name 'example-study' instead of creating a new one.
    Trial 3 finished with value: 36.44328767440815 and parameters: {'x': 8.036827616754362}. Best is trial 2 with value: 1.0394219248836642.
    Trial 4 finished with value: 24.644574021772485 and parameters: {'x': 6.964330168489248}. Best is trial 2 with value: 1.0394219248836642.
    Trial 5 finished with value: 9.127572886705048 and parameters: {'x': -1.021187330621034}. Best is trial 2 with value: 1.0394219248836642.




.. GENERATED FROM PYTHON SOURCE LINES 58-63

Experimental History
--------------------

We can access histories of studies and trials via the :class:`~optuna.study.Study` class.
For example, we can get all trials of ``example-study`` as:

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: default


    study = optuna.create_study(study_name=study_name, storage=storage_name, load_if_exists=True)
    df = study.trials_dataframe(attrs=("number", "value", "params", "state"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using an existing study with name 'example-study' instead of creating a new one.




.. GENERATED FROM PYTHON SOURCE LINES 68-69

The method :func:`~optuna.study.Study.trials_dataframe` returns a pandas dataframe like:

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default


    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

       number      value  params_x     state
    0       0  27.716192  7.264617  COMPLETE
    1       1  38.849730 -4.232955  COMPLETE
    2       2   1.039422  0.980480  COMPLETE
    3       3  36.443288  8.036828  COMPLETE
    4       4  24.644574  6.964330  COMPLETE
    5       5   9.127573 -1.021187  COMPLETE




.. GENERATED FROM PYTHON SOURCE LINES 73-76

A :class:`~optuna.study.Study` object also provides properties
such as :attr:`~optuna.study.Study.trials`, :attr:`~optuna.study.Study.best_value`,
:attr:`~optuna.study.Study.best_params` (see also :ref:`first`).

.. GENERATED FROM PYTHON SOURCE LINES 76-82

.. code-block:: default



    print("Best params: ", study.best_params)
    print("Best value: ", study.best_value)
    print("Best Trial: ", study.best_trial)
    print("Trials: ", study.trials)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Best params:  {'x': 0.9804795613212729}
    Best value:  1.0394219248836642
    Best Trial:  FrozenTrial(number=2, values=[1.0394219248836642], datetime_start=datetime.datetime(2022, 10, 11, 12, 59, 1, 376261), datetime_complete=datetime.datetime(2022, 10, 11, 12, 59, 1, 394150), params={'x': 0.9804795613212729}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=3, state=TrialState.COMPLETE, value=None)
    Trials:  [FrozenTrial(number=0, values=[27.71619186727524], datetime_start=datetime.datetime(2022, 10, 11, 12, 59, 1, 266994), datetime_complete=datetime.datetime(2022, 10, 11, 12, 59, 1, 295206), params={'x': 7.264616972513313}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=1, state=TrialState.COMPLETE, value=None), FrozenTrial(number=1, values=[38.84973004921458], datetime_start=datetime.datetime(2022, 10, 11, 12, 59, 1, 334877), datetime_complete=datetime.datetime(2022, 10, 11, 12, 59, 1, 354242), params={'x': -4.23295516181647}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=2, state=TrialState.COMPLETE, value=None), FrozenTrial(number=2, values=[1.0394219248836642], datetime_start=datetime.datetime(2022, 10, 11, 12, 59, 1, 376261), datetime_complete=datetime.datetime(2022, 10, 11, 12, 59, 1, 394150), params={'x': 0.9804795613212729}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=3, state=TrialState.COMPLETE, value=None), FrozenTrial(number=3, values=[36.44328767440815], datetime_start=datetime.datetime(2022, 10, 11, 12, 59, 1, 488918), datetime_complete=datetime.datetime(2022, 10, 11, 12, 59, 1, 513340), params={'x': 8.036827616754362}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=4, state=TrialState.COMPLETE, value=None), FrozenTrial(number=4, values=[24.644574021772485], datetime_start=datetime.datetime(2022, 10, 11, 12, 59, 1, 545221), datetime_complete=datetime.datetime(2022, 10, 11, 12, 59, 1, 564118), params={'x': 6.964330168489248}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=5, state=TrialState.COMPLETE, value=None), FrozenTrial(number=5, values=[9.127572886705048], datetime_start=datetime.datetime(2022, 10, 11, 12, 59, 1, 586227), datetime_complete=datetime.datetime(2022, 10, 11, 12, 59, 1, 604901), params={'x': -1.021187330621034}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, user_attrs={}, system_attrs={}, intermediate_values={}, trial_id=6, state=TrialState.COMPLETE, value=None)]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.837 seconds)


.. _sphx_glr_download_tutorial_20_recipes_001_rdb.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 001_rdb.py <001_rdb.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 001_rdb.ipynb <001_rdb.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
