
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/20_recipes/001_rdb.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_20_recipes_001_rdb.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_20_recipes_001_rdb.py:


.. _rdb:

Saving/Resuming Study with RDB Backend
==========================================

An RDB backend enables persistent experiments (i.e., to save and resume a study) as well as access to history of studies.
In addition, we can run multi-node optimization tasks with this feature, which is described in :ref:`distributed`.

In this section, let's try simple examples running on a local environment with SQLite DB.

.. note::
    You can also utilize other RDB backends, e.g., PostgreSQL or MySQL, by setting the storage argument to the DB's URL.
    Please refer to `SQLAlchemy's document <https://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls>`__ for how to set up the URL.


New Study
---------

We can create a persistent study by calling :func:`~optuna.study.create_study` function as follows.
An SQLite file ``example.db`` is automatically initialized with a new study record.

.. GENERATED FROM PYTHON SOURCE LINES 23-35

.. code-block:: Python


    import logging
    import sys

    import optuna

    # Add stream handler of stdout to show the messages
    optuna.logging.get_logger("optuna").addHandler(logging.StreamHandler(sys.stdout))
    study_name = "example-study"  # Unique identifier of the study.
    storage_name = "sqlite:///{}.db".format(study_name)
    study = optuna.create_study(study_name=study_name, storage=storage_name)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A new study created in RDB with name: example-study




.. GENERATED FROM PYTHON SOURCE LINES 36-37

To run a study, call :func:`~optuna.study.Study.optimize` method passing an objective function.

.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: Python



    def objective(trial):
        x = trial.suggest_float("x", -10, 10)
        return (x - 2) ** 2


    study.optimize(objective, n_trials=3)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Trial 0 finished with value: 9.557223769760686 and parameters: {'x': 5.0914759856354515}. Best is trial 0 with value: 9.557223769760686.
    Trial 1 finished with value: 25.35807596272366 and parameters: {'x': -3.0356802879773515}. Best is trial 0 with value: 9.557223769760686.
    Trial 2 finished with value: 35.26433223715644 and parameters: {'x': 7.938377912962128}. Best is trial 0 with value: 9.557223769760686.




.. GENERATED FROM PYTHON SOURCE LINES 47-52

Resume Study
------------

To resume a study, instantiate a :class:`~optuna.study.Study` object
passing the study name ``example-study`` and the DB URL ``sqlite:///example-study.db``.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: Python



    study = optuna.create_study(study_name=study_name, storage=storage_name, load_if_exists=True)
    study.optimize(objective, n_trials=3)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using an existing study with name 'example-study' instead of creating a new one.
    Trial 3 finished with value: 67.52713174425843 and parameters: {'x': -6.217489382059367}. Best is trial 0 with value: 9.557223769760686.
    Trial 4 finished with value: 112.2715401373871 and parameters: {'x': -8.595826543379573}. Best is trial 0 with value: 9.557223769760686.
    Trial 5 finished with value: 2.257478670232542 and parameters: {'x': 0.49750917798725247}. Best is trial 5 with value: 2.257478670232542.




.. GENERATED FROM PYTHON SOURCE LINES 58-75

Note that the storage doesn't store the state of the instance of :mod:`~optuna.samplers`
and :mod:`~optuna.pruners`.
When we resume a study with a sampler whose ``seed`` argument is specified for
reproducibility, you need to restore the sampler with using ``pickle`` as follows::

    import pickle

    # Save the sampler with pickle to be loaded later.
    with open("sampler.pkl", "wb") as fout:
        pickle.dump(study.sampler, fout)

    restored_sampler = pickle.load(open("sampler.pkl", "rb"))
    study = optuna.create_study(
        study_name=study_name, storage=storage_name, load_if_exists=True, sampler=restored_sampler
    )
    study.optimize(objective, n_trials=3)


.. GENERATED FROM PYTHON SOURCE LINES 77-88

Experimental History
--------------------

Note that this section requires the installation of `Pandas <https://pandas.pydata.org/>`__:

.. code-block:: bash

    $ pip install pandas

We can access histories of studies and trials via the :class:`~optuna.study.Study` class.
For example, we can get all trials of ``example-study`` as:

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: Python


    study = optuna.create_study(study_name=study_name, storage=storage_name, load_if_exists=True)
    df = study.trials_dataframe(attrs=("number", "value", "params", "state"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using an existing study with name 'example-study' instead of creating a new one.




.. GENERATED FROM PYTHON SOURCE LINES 93-94

The method :func:`~optuna.study.Study.trials_dataframe` returns a pandas dataframe like:

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: Python


    print(df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

       number       value  params_x     state
    0       0    9.557224  5.091476  COMPLETE
    1       1   25.358076 -3.035680  COMPLETE
    2       2   35.264332  7.938378  COMPLETE
    3       3   67.527132 -6.217489  COMPLETE
    4       4  112.271540 -8.595827  COMPLETE
    5       5    2.257479  0.497509  COMPLETE




.. GENERATED FROM PYTHON SOURCE LINES 98-101

A :class:`~optuna.study.Study` object also provides properties
such as :attr:`~optuna.study.Study.trials`, :attr:`~optuna.study.Study.best_value`,
:attr:`~optuna.study.Study.best_params` (see also :ref:`first`).

.. GENERATED FROM PYTHON SOURCE LINES 101-107

.. code-block:: Python



    print("Best params: ", study.best_params)
    print("Best value: ", study.best_value)
    print("Best Trial: ", study.best_trial)
    print("Trials: ", study.trials)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Best params:  {'x': 0.49750917798725247}
    Best value:  2.257478670232542
    Best Trial:  FrozenTrial(number=5, state=TrialState.COMPLETE, values=[2.257478670232542], datetime_start=datetime.datetime(2024, 11, 11, 12, 23, 21, 341062), datetime_complete=datetime.datetime(2024, 11, 11, 12, 23, 21, 356311), params={'x': 0.49750917798725247}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, trial_id=6, value=None)
    Trials:  [FrozenTrial(number=0, state=TrialState.COMPLETE, values=[9.557223769760686], datetime_start=datetime.datetime(2024, 11, 11, 12, 23, 21, 106858), datetime_complete=datetime.datetime(2024, 11, 11, 12, 23, 21, 137256), params={'x': 5.0914759856354515}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, trial_id=1, value=None), FrozenTrial(number=1, state=TrialState.COMPLETE, values=[25.35807596272366], datetime_start=datetime.datetime(2024, 11, 11, 12, 23, 21, 161851), datetime_complete=datetime.datetime(2024, 11, 11, 12, 23, 21, 178595), params={'x': -3.0356802879773515}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, trial_id=2, value=None), FrozenTrial(number=2, state=TrialState.COMPLETE, values=[35.26433223715644], datetime_start=datetime.datetime(2024, 11, 11, 12, 23, 21, 198707), datetime_complete=datetime.datetime(2024, 11, 11, 12, 23, 21, 213950), params={'x': 7.938377912962128}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, trial_id=3, value=None), FrozenTrial(number=3, state=TrialState.COMPLETE, values=[67.52713174425843], datetime_start=datetime.datetime(2024, 11, 11, 12, 23, 21, 264997), datetime_complete=datetime.datetime(2024, 11, 11, 12, 23, 21, 288898), params={'x': -6.217489382059367}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, trial_id=4, value=None), FrozenTrial(number=4, state=TrialState.COMPLETE, values=[112.2715401373871], datetime_start=datetime.datetime(2024, 11, 11, 12, 23, 21, 311025), datetime_complete=datetime.datetime(2024, 11, 11, 12, 23, 21, 326652), params={'x': -8.595826543379573}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, trial_id=5, value=None), FrozenTrial(number=5, state=TrialState.COMPLETE, values=[2.257478670232542], datetime_start=datetime.datetime(2024, 11, 11, 12, 23, 21, 341062), datetime_complete=datetime.datetime(2024, 11, 11, 12, 23, 21, 356311), params={'x': 0.49750917798725247}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'x': FloatDistribution(high=10.0, log=False, low=-10.0, step=None)}, trial_id=6, value=None)]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.912 seconds)


.. _sphx_glr_download_tutorial_20_recipes_001_rdb.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 001_rdb.ipynb <001_rdb.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 001_rdb.py <001_rdb.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 001_rdb.zip <001_rdb.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
