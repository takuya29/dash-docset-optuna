
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/10_key_features/003_efficient_optimization_algorithms.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_10_key_features_003_efficient_optimization_algorithms.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_10_key_features_003_efficient_optimization_algorithms.py:


.. _pruning:

Efficient Optimization Algorithms
=================================

Optuna enables efficient hyperparameter optimization by
adopting state-of-the-art algorithms for sampling hyperparameters and
pruning efficiently unpromising trials.

Sampling Algorithms
-------------------

Samplers basically continually narrow down the search space using the records of suggested parameter values and evaluated objective values,
leading to an optimal search space which giving off parameters leading to better objective values.
More detailed explanation of how samplers suggest parameters is in :class:`~optuna.samplers.BaseSampler`.

Optuna provides the following sampling algorithms:

- Grid Search implemented in :class:`~optuna.samplers.GridSampler`

- Random Search implemented in :class:`~optuna.samplers.RandomSampler`

- Tree-structured Parzen Estimator algorithm implemented in :class:`~optuna.samplers.TPESampler`

- CMA-ES based algorithm implemented in :class:`~optuna.samplers.CmaEsSampler`

- Gaussian process-based algorithm implemented in :class:`~optuna.samplers.GPSampler`

- Algorithm to enable partial fixed parameters implemented in :class:`~optuna.samplers.PartialFixedSampler`

- Nondominated Sorting Genetic Algorithm II implemented in :class:`~optuna.samplers.NSGAIISampler`

- A Quasi Monte Carlo sampling algorithm implemented in :class:`~optuna.samplers.QMCSampler`

The default sampler is :class:`~optuna.samplers.TPESampler`.

Switching Samplers
------------------

.. GENERATED FROM PYTHON SOURCE LINES 42-46

.. code-block:: Python


    import optuna









.. GENERATED FROM PYTHON SOURCE LINES 47-48

By default, Optuna uses :class:`~optuna.samplers.TPESampler` as follows.

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: Python


    study = optuna.create_study()
    print(f"Sampler is {study.sampler.__class__.__name__}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sampler is TPESampler




.. GENERATED FROM PYTHON SOURCE LINES 53-55

If you want to use different samplers for example :class:`~optuna.samplers.RandomSampler`
and :class:`~optuna.samplers.CmaEsSampler`,

.. GENERATED FROM PYTHON SOURCE LINES 55-63

.. code-block:: Python


    study = optuna.create_study(sampler=optuna.samplers.RandomSampler())
    print(f"Sampler is {study.sampler.__class__.__name__}")

    study = optuna.create_study(sampler=optuna.samplers.CmaEsSampler())
    print(f"Sampler is {study.sampler.__class__.__name__}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sampler is RandomSampler
    Sampler is CmaEsSampler




.. GENERATED FROM PYTHON SOURCE LINES 64-101

Pruning Algorithms
------------------

``Pruners`` automatically stop unpromising trials at the early stages of the training (a.k.a., automated early-stopping).
Currently :mod:`~optuna.pruners` module is expected to be used only for single-objective optimization.

Optuna provides the following pruning algorithms:

- Median pruning algorithm implemented in :class:`~optuna.pruners.MedianPruner`

- Non-pruning algorithm implemented in :class:`~optuna.pruners.NopPruner`

- Algorithm to operate pruner with tolerance implemented in :class:`~optuna.pruners.PatientPruner`

- Algorithm to prune specified percentile of trials implemented in :class:`~optuna.pruners.PercentilePruner`

- Asynchronous Successive Halving algorithm implemented in :class:`~optuna.pruners.SuccessiveHalvingPruner`

- Hyperband algorithm implemented in :class:`~optuna.pruners.HyperbandPruner`

- Threshold pruning algorithm implemented in :class:`~optuna.pruners.ThresholdPruner`

- A pruning algorithm based on `Wilcoxon signed-rank test <https://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test>`__ implemented in :class:`~optuna.pruners.WilcoxonPruner`

We use :class:`~optuna.pruners.MedianPruner` in most examples,
though basically it is outperformed by :class:`~optuna.pruners.SuccessiveHalvingPruner` and
:class:`~optuna.pruners.HyperbandPruner` as in `this benchmark result <https://github.com/optuna/optuna/wiki/Benchmarks-with-Kurobako>`__.


Activating Pruners
------------------
To turn on the pruning feature, you need to call :func:`~optuna.trial.Trial.report` and :func:`~optuna.trial.Trial.should_prune` after each step of the iterative training.
:func:`~optuna.trial.Trial.report` periodically monitors the intermediate objective values.
:func:`~optuna.trial.Trial.should_prune` decides termination of the trial that does not meet a predefined condition.

We would recommend using integration modules for major machine learning frameworks.
Exclusive list is :mod:`~optuna.integration` and usecases are available in `optuna-examples <https://github.com/optuna/optuna-examples/>`__.

.. GENERATED FROM PYTHON SOURCE LINES 101-135

.. code-block:: Python



    import logging
    import sys

    import sklearn.datasets
    import sklearn.linear_model
    import sklearn.model_selection


    def objective(trial):
        iris = sklearn.datasets.load_iris()
        classes = list(set(iris.target))
        train_x, valid_x, train_y, valid_y = sklearn.model_selection.train_test_split(
            iris.data, iris.target, test_size=0.25, random_state=0
        )

        alpha = trial.suggest_float("alpha", 1e-5, 1e-1, log=True)
        clf = sklearn.linear_model.SGDClassifier(alpha=alpha)

        for step in range(100):
            clf.partial_fit(train_x, train_y, classes=classes)

            # Report intermediate objective value.
            intermediate_value = 1.0 - clf.score(valid_x, valid_y)
            trial.report(intermediate_value, step)

            # Handle pruning based on the intermediate value.
            if trial.should_prune():
                raise optuna.TrialPruned()

        return 1.0 - clf.score(valid_x, valid_y)









.. GENERATED FROM PYTHON SOURCE LINES 136-137

Set up the median stopping rule as the pruning condition.

.. GENERATED FROM PYTHON SOURCE LINES 137-143

.. code-block:: Python


    # Add stream handler of stdout to show the messages
    optuna.logging.get_logger("optuna").addHandler(logging.StreamHandler(sys.stdout))
    study = optuna.create_study(pruner=optuna.pruners.MedianPruner())
    study.optimize(objective, n_trials=20)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A new study created in memory with name: no-name-cf777e4b-3cb2-41b4-b644-fdb0d592eb4c
    Trial 0 finished with value: 0.02631578947368418 and parameters: {'alpha': 0.00015445702667410643}. Best is trial 0 with value: 0.02631578947368418.
    Trial 1 finished with value: 0.13157894736842102 and parameters: {'alpha': 2.3696898110187915e-05}. Best is trial 0 with value: 0.02631578947368418.
    Trial 2 finished with value: 0.052631578947368474 and parameters: {'alpha': 0.0074180172619222684}. Best is trial 0 with value: 0.02631578947368418.
    Trial 3 finished with value: 0.3421052631578947 and parameters: {'alpha': 0.0017533870245255313}. Best is trial 0 with value: 0.02631578947368418.
    Trial 4 finished with value: 0.07894736842105265 and parameters: {'alpha': 0.00013754413825303974}. Best is trial 0 with value: 0.02631578947368418.
    Trial 5 pruned. 
    Trial 6 pruned. 
    Trial 7 pruned. 
    Trial 8 finished with value: 0.23684210526315785 and parameters: {'alpha': 0.035402055985854705}. Best is trial 0 with value: 0.02631578947368418.
    Trial 9 pruned. 
    Trial 10 pruned. 
    Trial 11 pruned. 
    Trial 12 pruned. 
    Trial 13 pruned. 
    Trial 14 pruned. 
    Trial 15 finished with value: 0.3421052631578947 and parameters: {'alpha': 0.08034218457890803}. Best is trial 0 with value: 0.02631578947368418.
    Trial 16 pruned. 
    Trial 17 pruned. 
    Trial 18 finished with value: 0.02631578947368418 and parameters: {'alpha': 0.006074116727649296}. Best is trial 0 with value: 0.02631578947368418.
    Trial 19 pruned. 




.. GENERATED FROM PYTHON SOURCE LINES 144-146

As you can see, several trials were pruned (stopped) before they finished all of the iterations.
The format of message is ``"Trial <Trial Number> pruned."``.

.. GENERATED FROM PYTHON SOURCE LINES 148-174

Which Sampler and Pruner Should be Used?
----------------------------------------

From the benchmark results which are available at `optuna/optuna - wiki "Benchmarks with Kurobako" <https://github.com/optuna/optuna/wiki/Benchmarks-with-Kurobako>`__, at least for not deep learning tasks, we would say that

* For :class:`~optuna.samplers.RandomSampler`, :class:`~optuna.pruners.MedianPruner` is the best.
* For :class:`~optuna.samplers.TPESampler`, :class:`~optuna.pruners.HyperbandPruner` is the best.

However, note that the benchmark is not deep learning.
For deep learning tasks,
consult the below table.
This table is from the `Ozaki et al., Hyperparameter Optimization Methods: Overview and Characteristics, in IEICE Trans, Vol.J103-D No.9 pp.615-631, 2020 <https://doi.org/10.14923/transinfj.2019JDR0003>`__ paper,
which is written in Japanese.

+---------------------------+-----------------------------------------+---------------------------------------------------------------+
| Parallel Compute Resource | Categorical/Conditional Hyperparameters | Recommended Algorithms                                        |
+===========================+=========================================+===============================================================+
| Limited                   | No                                      | TPE. GP-EI if search space is low-dimensional and continuous. |
+                           +-----------------------------------------+---------------------------------------------------------------+
|                           | Yes                                     | TPE. GP-EI if search space is low-dimensional and continuous  |
+---------------------------+-----------------------------------------+---------------------------------------------------------------+
| Sufficient                | No                                      | CMA-ES, Random Search                                         |
+                           +-----------------------------------------+---------------------------------------------------------------+
|                           | Yes                                     | Random Search or Genetic Algorithm                            |
+---------------------------+-----------------------------------------+---------------------------------------------------------------+


.. GENERATED FROM PYTHON SOURCE LINES 176-191

Integration Modules for Pruning
-------------------------------
To implement pruning mechanism in much simpler forms, Optuna provides integration modules for the following libraries.

For the complete list of Optuna's integration modules, see :mod:`~optuna.integration`.

For example, `LightGBMPruningCallback <https://optuna-integration.readthedocs.io/en/stable/reference/generated/optuna_integration.LightGBMPruningCallback.html>`__ introduces pruning without directly changing the logic of training iteration.
(See also `example <https://github.com/optuna/optuna-examples/blob/main/lightgbm/lightgbm_integration.py>`__ for the entire script.)

.. code-block:: text

        import optuna.integration

        pruning_callback = optuna.integration.LightGBMPruningCallback(trial, 'validation-error')
        gbm = lgb.train(param, dtrain, valid_sets=[dvalid], callbacks=[pruning_callback])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.437 seconds)


.. _sphx_glr_download_tutorial_10_key_features_003_efficient_optimization_algorithms.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 003_efficient_optimization_algorithms.ipynb <003_efficient_optimization_algorithms.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 003_efficient_optimization_algorithms.py <003_efficient_optimization_algorithms.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 003_efficient_optimization_algorithms.zip <003_efficient_optimization_algorithms.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
