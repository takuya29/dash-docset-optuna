
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/10_key_features/002_configurations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorial_10_key_features_002_configurations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_10_key_features_002_configurations.py:


.. _configurations:

2. Pythonic Search Space
========================

For hyperparameter sampling, Optuna provides the following features:

- :func:`optuna.trial.Trial.suggest_categorical` for categorical parameters
- :func:`optuna.trial.Trial.suggest_int` for integer parameters
- :func:`optuna.trial.Trial.suggest_float` for floating point parameters

With optional arguments of ``step`` and ``log``, we can discretize or take the logarithm of
integer and floating point parameters.

.. GENERATED FROM PYTHON SOURCE LINES 16-44

.. code-block:: default



    import optuna


    def objective(trial):
        # Categorical parameter
        optimizer = trial.suggest_categorical("optimizer", ["MomentumSGD", "Adam"])

        # Integer parameter
        num_layers = trial.suggest_int("num_layers", 1, 3)

        # Integer parameter (log)
        num_channels = trial.suggest_int("num_channels", 32, 512, log=True)

        # Integer parameter (discretized)
        num_units = trial.suggest_int("num_units", 10, 100, step=5)

        # Floating point parameter
        dropout_rate = trial.suggest_float("dropout_rate", 0.0, 1.0)

        # Floating point parameter (log)
        learning_rate = trial.suggest_float("learning_rate", 1e-5, 1e-2, log=True)

        # Floating point parameter (discretized)
        drop_path_rate = trial.suggest_float("drop_path_rate", 0.0, 1.0, step=0.1)









.. GENERATED FROM PYTHON SOURCE LINES 45-53

Defining Parameter Spaces
-------------------------

In Optuna, we define search spaces using familiar Python syntax including conditionals and loops.

Also, you can use branches or loops depending on the parameter values.

For more various use, see `examples <https://github.com/optuna/optuna-examples/>`_.

.. GENERATED FROM PYTHON SOURCE LINES 55-56

- Branches:

.. GENERATED FROM PYTHON SOURCE LINES 56-70

.. code-block:: default

    import sklearn.ensemble
    import sklearn.svm


    def objective(trial):
        classifier_name = trial.suggest_categorical("classifier", ["SVC", "RandomForest"])
        if classifier_name == "SVC":
            svc_c = trial.suggest_float("svc_c", 1e-10, 1e10, log=True)
            classifier_obj = sklearn.svm.SVC(C=svc_c)
        else:
            rf_max_depth = trial.suggest_int("rf_max_depth", 2, 32, log=True)
            classifier_obj = sklearn.ensemble.RandomForestClassifier(max_depth=rf_max_depth)









.. GENERATED FROM PYTHON SOURCE LINES 71-91

- Loops:

.. code-block:: python

    import torch
    import torch.nn as nn


    def create_model(trial, in_size):
        n_layers = trial.suggest_int("n_layers", 1, 3)

        layers = []
        for i in range(n_layers):
            n_units = trial.suggest_int("n_units_l{}".format(i), 4, 128, log=True)
            layers.append(nn.Linear(in_size, n_units))
            layers.append(nn.ReLU())
            in_size = n_units
        layers.append(nn.Linear(in_size, 10))

        return nn.Sequential(*layers)

.. GENERATED FROM PYTHON SOURCE LINES 94-98

Note on the Number of Parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The difficulty of optimization increases roughly exponentially with regard to the number of parameters. That is, the number of necessary trials increases exponentially when you increase the number of parameters, so it is recommended to not add unimportant parameters.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.001 seconds)


.. _sphx_glr_download_tutorial_10_key_features_002_configurations.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 002_configurations.py <002_configurations.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 002_configurations.ipynb <002_configurations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
